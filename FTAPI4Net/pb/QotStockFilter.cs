// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QotStockFilter {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_BaseFilter__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder> internal__static_Qot_StockFilter_BaseFilter__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_BaseData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseData, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder> internal__static_Qot_StockFilter_BaseData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_StockData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.StockData, global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder> internal__static_Qot_StockFilter_StockData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_C2S__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.C2S, global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder> internal__static_Qot_StockFilter_C2S__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_S2C__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.S2C, global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder> internal__static_Qot_StockFilter_S2C__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_Request__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Request, global::Futu.OpenApi.Pb.QotStockFilter.Request.Builder> internal__static_Qot_StockFilter_Request__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_Response__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Response, global::Futu.OpenApi.Pb.QotStockFilter.Response.Builder> internal__static_Qot_StockFilter_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static QotStockFilter() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVRb3RfU3RvY2tGaWx0ZXIucHJvdG8SD1FvdF9TdG9ja0ZpbHRlchoMQ29t", 
            "bW9uLnByb3RvGhBRb3RfQ29tbW9uLnByb3RvImYKCkJhc2VGaWx0ZXISDQoF", 
            "ZmllbGQYASACKAUSEQoJZmlsdGVyTWluGAIgASgBEhEKCWZpbHRlck1heBgD", 
            "IAEoARISCgppc05vRmlsdGVyGAQgASgIEg8KB3NvcnREaXIYBSABKAUiKAoI", 
            "QmFzZURhdGESDQoFZmllbGQYASACKAUSDQoFdmFsdWUYAiACKAEicgoJU3Rv", 
            "Y2tEYXRhEiYKCHNlY3VyaXR5GAEgAigLMhQuUW90X0NvbW1vbi5TZWN1cml0", 
            "eRIMCgRuYW1lGAIgAigJEi8KDGJhc2VEYXRhTGlzdBgDIAMoCzIZLlFvdF9T", 
            "dG9ja0ZpbHRlci5CYXNlRGF0YSKLAQoDQzJTEg0KBWJlZ2luGAEgAigFEgsK", 
            "A251bRgCIAIoBRIOCgZtYXJrZXQYAyACKAUSIwoFcGxhdGUYBCABKAsyFC5R", 
            "b3RfQ29tbW9uLlNlY3VyaXR5EjMKDmJhc2VGaWx0ZXJMaXN0GAUgAygLMhsu", 
            "UW90X1N0b2NrRmlsdGVyLkJhc2VGaWx0ZXIiVwoDUzJDEhAKCGxhc3RQYWdl", 
            "GAEgAigIEhAKCGFsbENvdW50GAIgAigFEiwKCGRhdGFMaXN0GAMgAygLMhou", 
            "UW90X1N0b2NrRmlsdGVyLlN0b2NrRGF0YSIsCgdSZXF1ZXN0EiEKA2MycxgB", 
            "IAIoCzIULlFvdF9TdG9ja0ZpbHRlci5DMlMiZQoIUmVzcG9uc2USFQoHcmV0", 
            "VHlwZRgBIAIoBToELTQwMBIOCgZyZXRNc2cYAiABKAkSDwoHZXJyQ29kZRgD", 
            "IAEoBRIhCgNzMmMYBCABKAsyFC5Rb3RfU3RvY2tGaWx0ZXIuUzJDKtkDCgpT", 
            "dG9ja0ZpZWxkEhYKElN0b2NrRmllbGRfVW5rbm93bhAAEhgKFFN0b2NrRmll", 
            "bGRfU3RvY2tDb2RlEAESGAoUU3RvY2tGaWVsZF9TdG9ja05hbWUQAhIXChNT", 
            "dG9ja0ZpZWxkX0N1clByaWNlEAMSLAooU3RvY2tGaWVsZF9DdXJQcmljZVRv", 
            "SGlnaGVzdDUyV2Vla3NSYXRpbxAEEisKJ1N0b2NrRmllbGRfQ3VyUHJpY2VU", 
            "b0xvd2VzdDUyV2Vla3NSYXRpbxAFEi0KKVN0b2NrRmllbGRfSGlnaFByaWNl", 
            "VG9IaWdoZXN0NTJXZWVrc1JhdGlvEAYSKwonU3RvY2tGaWVsZF9Mb3dQcmlj", 
            "ZVRvTG93ZXN0NTJXZWVrc1JhdGlvEAcSGgoWU3RvY2tGaWVsZF9Wb2x1bWVS", 
            "YXRpbxAIEhoKFlN0b2NrRmllbGRfQmlkQXNrUmF0aW8QCRIXChNTdG9ja0Zp", 
            "ZWxkX0xvdFByaWNlEAoSGAoUU3RvY2tGaWVsZF9NYXJrZXRWYWwQCxIXChNT", 
            "dG9ja0ZpZWxkX1BlQW5udWFsEAwSFAoQU3RvY2tGaWVsZF9QZVRUTRANEhUK", 
            "EVN0b2NrRmllbGRfUGJSYXRlEA4qQgoHU29ydERpchIOCgpTb3J0RGlyX05v", 
            "EAASEgoOU29ydERpcl9Bc2NlbmQQARITCg9Tb3J0RGlyX0Rlc2NlbmQQAkIV", 
          "ChNjb20uZnV0dS5vcGVuYXBpLnBi"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qot_StockFilter_BaseFilter__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qot_StockFilter_BaseFilter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder>(internal__static_Qot_StockFilter_BaseFilter__Descriptor,
                new string[] { "Field", "FilterMin", "FilterMax", "IsNoFilter", "SortDir", });
        internal__static_Qot_StockFilter_BaseData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Qot_StockFilter_BaseData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseData, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder>(internal__static_Qot_StockFilter_BaseData__Descriptor,
                new string[] { "Field", "Value", });
        internal__static_Qot_StockFilter_StockData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Qot_StockFilter_StockData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.StockData, global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder>(internal__static_Qot_StockFilter_StockData__Descriptor,
                new string[] { "Security", "Name", "BaseDataList", });
        internal__static_Qot_StockFilter_C2S__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Qot_StockFilter_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.C2S, global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder>(internal__static_Qot_StockFilter_C2S__Descriptor,
                new string[] { "Begin", "Num", "Market", "Plate", "BaseFilterList", });
        internal__static_Qot_StockFilter_S2C__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Qot_StockFilter_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.S2C, global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder>(internal__static_Qot_StockFilter_S2C__Descriptor,
                new string[] { "LastPage", "AllCount", "DataList", });
        internal__static_Qot_StockFilter_Request__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Qot_StockFilter_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Request, global::Futu.OpenApi.Pb.QotStockFilter.Request.Builder>(internal__static_Qot_StockFilter_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Qot_StockFilter_Response__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Qot_StockFilter_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Response, global::Futu.OpenApi.Pb.QotStockFilter.Response.Builder>(internal__static_Qot_StockFilter_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          global::Futu.OpenApi.Pb.QotCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Enums
    public enum StockField {
      StockField_Unknown = 0,
      StockField_StockCode = 1,
      StockField_StockName = 2,
      StockField_CurPrice = 3,
      StockField_CurPriceToHighest52WeeksRatio = 4,
      StockField_CurPriceToLowest52WeeksRatio = 5,
      StockField_HighPriceToHighest52WeeksRatio = 6,
      StockField_LowPriceToLowest52WeeksRatio = 7,
      StockField_VolumeRatio = 8,
      StockField_BidAskRatio = 9,
      StockField_LotPrice = 10,
      StockField_MarketVal = 11,
      StockField_PeAnnual = 12,
      StockField_PeTTM = 13,
      StockField_PbRate = 14,
    }
    
    public enum SortDir {
      SortDir_No = 0,
      SortDir_Ascend = 1,
      SortDir_Descend = 2,
    }
    
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BaseFilter : pb::GeneratedMessage<BaseFilter, BaseFilter.Builder> {
      private BaseFilter() { }
      private static readonly BaseFilter defaultInstance = new BaseFilter().MakeReadOnly();
      private static readonly string[] _baseFilterFieldNames = new string[] { "field", "filterMax", "filterMin", "isNoFilter", "sortDir" };
      private static readonly uint[] _baseFilterFieldTags = new uint[] { 8, 25, 17, 32, 40 };
      public static BaseFilter DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override BaseFilter DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override BaseFilter ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseFilter__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<BaseFilter, BaseFilter.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseFilter__FieldAccessorTable; }
      }
      
      public const int FieldFieldNumber = 1;
      private bool hasField;
      private int field_;
      public bool HasField {
        get { return hasField; }
      }
      public int Field {
        get { return field_; }
      }
      
      public const int FilterMinFieldNumber = 2;
      private bool hasFilterMin;
      private double filterMin_;
      public bool HasFilterMin {
        get { return hasFilterMin; }
      }
      public double FilterMin {
        get { return filterMin_; }
      }
      
      public const int FilterMaxFieldNumber = 3;
      private bool hasFilterMax;
      private double filterMax_;
      public bool HasFilterMax {
        get { return hasFilterMax; }
      }
      public double FilterMax {
        get { return filterMax_; }
      }
      
      public const int IsNoFilterFieldNumber = 4;
      private bool hasIsNoFilter;
      private bool isNoFilter_;
      public bool HasIsNoFilter {
        get { return hasIsNoFilter; }
      }
      public bool IsNoFilter {
        get { return isNoFilter_; }
      }
      
      public const int SortDirFieldNumber = 5;
      private bool hasSortDir;
      private int sortDir_;
      public bool HasSortDir {
        get { return hasSortDir; }
      }
      public int SortDir {
        get { return sortDir_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasField) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _baseFilterFieldNames;
        if (hasField) {
          output.WriteInt32(1, field_names[0], Field);
        }
        if (hasFilterMin) {
          output.WriteDouble(2, field_names[2], FilterMin);
        }
        if (hasFilterMax) {
          output.WriteDouble(3, field_names[1], FilterMax);
        }
        if (hasIsNoFilter) {
          output.WriteBool(4, field_names[3], IsNoFilter);
        }
        if (hasSortDir) {
          output.WriteInt32(5, field_names[4], SortDir);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasField) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Field);
        }
        if (hasFilterMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, FilterMin);
        }
        if (hasFilterMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, FilterMax);
        }
        if (hasIsNoFilter) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsNoFilter);
        }
        if (hasSortDir) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, SortDir);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static BaseFilter ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseFilter ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseFilter ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static BaseFilter ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static BaseFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static BaseFilter ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private BaseFilter MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(BaseFilter prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<BaseFilter, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(BaseFilter cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private BaseFilter result;
        
        private BaseFilter PrepareBuilder() {
          if (resultIsReadOnly) {
            BaseFilter original = result;
            result = new BaseFilter();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override BaseFilter MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Descriptor; }
        }
        
        public override BaseFilter DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.DefaultInstance; }
        }
        
        public override BaseFilter BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is BaseFilter) {
            return MergeFrom((BaseFilter) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(BaseFilter other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasField) {
            Field = other.Field;
          }
          if (other.HasFilterMin) {
            FilterMin = other.FilterMin;
          }
          if (other.HasFilterMax) {
            FilterMax = other.FilterMax;
          }
          if (other.HasIsNoFilter) {
            IsNoFilter = other.IsNoFilter;
          }
          if (other.HasSortDir) {
            SortDir = other.SortDir;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_baseFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _baseFilterFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasField = input.ReadInt32(ref result.field_);
                break;
              }
              case 17: {
                result.hasFilterMin = input.ReadDouble(ref result.filterMin_);
                break;
              }
              case 25: {
                result.hasFilterMax = input.ReadDouble(ref result.filterMax_);
                break;
              }
              case 32: {
                result.hasIsNoFilter = input.ReadBool(ref result.isNoFilter_);
                break;
              }
              case 40: {
                result.hasSortDir = input.ReadInt32(ref result.sortDir_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasField {
          get { return result.hasField; }
        }
        public int Field {
          get { return result.Field; }
          set { SetField(value); }
        }
        public Builder SetField(int value) {
          PrepareBuilder();
          result.hasField = true;
          result.field_ = value;
          return this;
        }
        public Builder ClearField() {
          PrepareBuilder();
          result.hasField = false;
          result.field_ = 0;
          return this;
        }
        
        public bool HasFilterMin {
          get { return result.hasFilterMin; }
        }
        public double FilterMin {
          get { return result.FilterMin; }
          set { SetFilterMin(value); }
        }
        public Builder SetFilterMin(double value) {
          PrepareBuilder();
          result.hasFilterMin = true;
          result.filterMin_ = value;
          return this;
        }
        public Builder ClearFilterMin() {
          PrepareBuilder();
          result.hasFilterMin = false;
          result.filterMin_ = 0D;
          return this;
        }
        
        public bool HasFilterMax {
          get { return result.hasFilterMax; }
        }
        public double FilterMax {
          get { return result.FilterMax; }
          set { SetFilterMax(value); }
        }
        public Builder SetFilterMax(double value) {
          PrepareBuilder();
          result.hasFilterMax = true;
          result.filterMax_ = value;
          return this;
        }
        public Builder ClearFilterMax() {
          PrepareBuilder();
          result.hasFilterMax = false;
          result.filterMax_ = 0D;
          return this;
        }
        
        public bool HasIsNoFilter {
          get { return result.hasIsNoFilter; }
        }
        public bool IsNoFilter {
          get { return result.IsNoFilter; }
          set { SetIsNoFilter(value); }
        }
        public Builder SetIsNoFilter(bool value) {
          PrepareBuilder();
          result.hasIsNoFilter = true;
          result.isNoFilter_ = value;
          return this;
        }
        public Builder ClearIsNoFilter() {
          PrepareBuilder();
          result.hasIsNoFilter = false;
          result.isNoFilter_ = false;
          return this;
        }
        
        public bool HasSortDir {
          get { return result.hasSortDir; }
        }
        public int SortDir {
          get { return result.SortDir; }
          set { SetSortDir(value); }
        }
        public Builder SetSortDir(int value) {
          PrepareBuilder();
          result.hasSortDir = true;
          result.sortDir_ = value;
          return this;
        }
        public Builder ClearSortDir() {
          PrepareBuilder();
          result.hasSortDir = false;
          result.sortDir_ = 0;
          return this;
        }
      }
      static BaseFilter() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BaseData : pb::GeneratedMessage<BaseData, BaseData.Builder> {
      private BaseData() { }
      private static readonly BaseData defaultInstance = new BaseData().MakeReadOnly();
      private static readonly string[] _baseDataFieldNames = new string[] { "field", "value" };
      private static readonly uint[] _baseDataFieldTags = new uint[] { 8, 17 };
      public static BaseData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override BaseData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override BaseData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<BaseData, BaseData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseData__FieldAccessorTable; }
      }
      
      public const int FieldFieldNumber = 1;
      private bool hasField;
      private int field_;
      public bool HasField {
        get { return hasField; }
      }
      public int Field {
        get { return field_; }
      }
      
      public const int ValueFieldNumber = 2;
      private bool hasValue;
      private double value_;
      public bool HasValue {
        get { return hasValue; }
      }
      public double Value {
        get { return value_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasField) return false;
          if (!hasValue) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _baseDataFieldNames;
        if (hasField) {
          output.WriteInt32(1, field_names[0], Field);
        }
        if (hasValue) {
          output.WriteDouble(2, field_names[1], Value);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasField) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Field);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static BaseData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static BaseData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static BaseData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static BaseData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private BaseData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(BaseData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<BaseData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(BaseData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private BaseData result;
        
        private BaseData PrepareBuilder() {
          if (resultIsReadOnly) {
            BaseData original = result;
            result = new BaseData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override BaseData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Descriptor; }
        }
        
        public override BaseData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseData.DefaultInstance; }
        }
        
        public override BaseData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is BaseData) {
            return MergeFrom((BaseData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(BaseData other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.BaseData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasField) {
            Field = other.Field;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_baseDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _baseDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasField = input.ReadInt32(ref result.field_);
                break;
              }
              case 17: {
                result.hasValue = input.ReadDouble(ref result.value_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasField {
          get { return result.hasField; }
        }
        public int Field {
          get { return result.Field; }
          set { SetField(value); }
        }
        public Builder SetField(int value) {
          PrepareBuilder();
          result.hasField = true;
          result.field_ = value;
          return this;
        }
        public Builder ClearField() {
          PrepareBuilder();
          result.hasField = false;
          result.field_ = 0;
          return this;
        }
        
        public bool HasValue {
          get { return result.hasValue; }
        }
        public double Value {
          get { return result.Value; }
          set { SetValue(value); }
        }
        public Builder SetValue(double value) {
          PrepareBuilder();
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder ClearValue() {
          PrepareBuilder();
          result.hasValue = false;
          result.value_ = 0D;
          return this;
        }
      }
      static BaseData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class StockData : pb::GeneratedMessage<StockData, StockData.Builder> {
      private StockData() { }
      private static readonly StockData defaultInstance = new StockData().MakeReadOnly();
      private static readonly string[] _stockDataFieldNames = new string[] { "baseDataList", "name", "security" };
      private static readonly uint[] _stockDataFieldTags = new uint[] { 26, 18, 10 };
      public static StockData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override StockData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override StockData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_StockData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<StockData, StockData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_StockData__FieldAccessorTable; }
      }
      
      public const int SecurityFieldNumber = 1;
      private bool hasSecurity;
      private global::Futu.OpenApi.Pb.QotCommon.Security security_;
      public bool HasSecurity {
        get { return hasSecurity; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Security {
        get { return security_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int NameFieldNumber = 2;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int BaseDataListFieldNumber = 3;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> baseDataList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> BaseDataListList {
        get { return baseDataList_; }
      }
      public int BaseDataListCount {
        get { return baseDataList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.BaseData GetBaseDataList(int index) {
        return baseDataList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasSecurity) return false;
          if (!hasName) return false;
          if (!Security.IsInitialized) return false;
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseData element in BaseDataListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _stockDataFieldNames;
        if (hasSecurity) {
          output.WriteMessage(1, field_names[2], Security);
        }
        if (hasName) {
          output.WriteString(2, field_names[1], Name);
        }
        if (baseDataList_.Count > 0) {
          output.WriteMessageArray(3, field_names[0], baseDataList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSecurity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Security);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseData element in BaseDataListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static StockData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static StockData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static StockData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static StockData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static StockData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static StockData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static StockData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static StockData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static StockData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static StockData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private StockData MakeReadOnly() {
        baseDataList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(StockData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<StockData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(StockData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private StockData result;
        
        private StockData PrepareBuilder() {
          if (resultIsReadOnly) {
            StockData original = result;
            result = new StockData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override StockData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.StockData.Descriptor; }
        }
        
        public override StockData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.StockData.DefaultInstance; }
        }
        
        public override StockData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is StockData) {
            return MergeFrom((StockData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(StockData other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.StockData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSecurity) {
            MergeSecurity(other.Security);
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.baseDataList_.Count != 0) {
            result.baseDataList_.Add(other.baseDataList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_stockDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _stockDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasSecurity) {
                  subBuilder.MergeFrom(Security);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Security = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 26: {
                input.ReadMessageArray(tag, field_name, result.baseDataList_, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSecurity {
         get { return result.hasSecurity; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Security {
          get { return result.Security; }
          set { SetSecurity(value); }
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = value;
          return this;
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = builderForValue.Build();
          return this;
        }
        public Builder MergeSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasSecurity &&
              result.security_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.security_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.security_).MergeFrom(value).BuildPartial();
          } else {
            result.security_ = value;
          }
          result.hasSecurity = true;
          return this;
        }
        public Builder ClearSecurity() {
          PrepareBuilder();
          result.hasSecurity = false;
          result.security_ = null;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> BaseDataListList {
          get { return PrepareBuilder().baseDataList_; }
        }
        public int BaseDataListCount {
          get { return result.BaseDataListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.BaseData GetBaseDataList(int index) {
          return result.GetBaseDataList(index);
        }
        public Builder SetBaseDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseDataList_[index] = value;
          return this;
        }
        public Builder SetBaseDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseDataList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddBaseDataList(global::Futu.OpenApi.Pb.QotStockFilter.BaseData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseDataList_.Add(value);
          return this;
        }
        public Builder AddBaseDataList(global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseDataList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeBaseDataList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> values) {
          PrepareBuilder();
          result.baseDataList_.Add(values);
          return this;
        }
        public Builder ClearBaseDataList() {
          PrepareBuilder();
          result.baseDataList_.Clear();
          return this;
        }
      }
      static StockData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
      private C2S() { }
      private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
      private static readonly string[] _c2SFieldNames = new string[] { "baseFilterList", "begin", "market", "num", "plate" };
      private static readonly uint[] _c2SFieldTags = new uint[] { 42, 8, 24, 16, 34 };
      public static C2S DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override C2S DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override C2S ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_C2S__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_C2S__FieldAccessorTable; }
      }
      
      public const int BeginFieldNumber = 1;
      private bool hasBegin;
      private int begin_;
      public bool HasBegin {
        get { return hasBegin; }
      }
      public int Begin {
        get { return begin_; }
      }
      
      public const int NumFieldNumber = 2;
      private bool hasNum;
      private int num_;
      public bool HasNum {
        get { return hasNum; }
      }
      public int Num {
        get { return num_; }
      }
      
      public const int MarketFieldNumber = 3;
      private bool hasMarket;
      private int market_;
      public bool HasMarket {
        get { return hasMarket; }
      }
      public int Market {
        get { return market_; }
      }
      
      public const int PlateFieldNumber = 4;
      private bool hasPlate;
      private global::Futu.OpenApi.Pb.QotCommon.Security plate_;
      public bool HasPlate {
        get { return hasPlate; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Plate {
        get { return plate_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int BaseFilterListFieldNumber = 5;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> baseFilterList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> BaseFilterListList {
        get { return baseFilterList_; }
      }
      public int BaseFilterListCount {
        get { return baseFilterList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter GetBaseFilterList(int index) {
        return baseFilterList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasBegin) return false;
          if (!hasNum) return false;
          if (!hasMarket) return false;
          if (HasPlate) {
            if (!Plate.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter element in BaseFilterListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _c2SFieldNames;
        if (hasBegin) {
          output.WriteInt32(1, field_names[1], Begin);
        }
        if (hasNum) {
          output.WriteInt32(2, field_names[3], Num);
        }
        if (hasMarket) {
          output.WriteInt32(3, field_names[2], Market);
        }
        if (hasPlate) {
          output.WriteMessage(4, field_names[4], Plate);
        }
        if (baseFilterList_.Count > 0) {
          output.WriteMessageArray(5, field_names[0], baseFilterList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBegin) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Begin);
        }
        if (hasNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
        }
        if (hasMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Market);
        }
        if (hasPlate) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Plate);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter element in BaseFilterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static C2S ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private C2S MakeReadOnly() {
        baseFilterList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(C2S prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(C2S cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private C2S result;
        
        private C2S PrepareBuilder() {
          if (resultIsReadOnly) {
            C2S original = result;
            result = new C2S();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override C2S MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.C2S.Descriptor; }
        }
        
        public override C2S DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance; }
        }
        
        public override C2S BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is C2S) {
            return MergeFrom((C2S) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(C2S other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasBegin) {
            Begin = other.Begin;
          }
          if (other.HasNum) {
            Num = other.Num;
          }
          if (other.HasMarket) {
            Market = other.Market;
          }
          if (other.HasPlate) {
            MergePlate(other.Plate);
          }
          if (other.baseFilterList_.Count != 0) {
            result.baseFilterList_.Add(other.baseFilterList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _c2SFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasBegin = input.ReadInt32(ref result.begin_);
                break;
              }
              case 16: {
                result.hasNum = input.ReadInt32(ref result.num_);
                break;
              }
              case 24: {
                result.hasMarket = input.ReadInt32(ref result.market_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasPlate) {
                  subBuilder.MergeFrom(Plate);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Plate = subBuilder.BuildPartial();
                break;
              }
              case 42: {
                input.ReadMessageArray(tag, field_name, result.baseFilterList_, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasBegin {
          get { return result.hasBegin; }
        }
        public int Begin {
          get { return result.Begin; }
          set { SetBegin(value); }
        }
        public Builder SetBegin(int value) {
          PrepareBuilder();
          result.hasBegin = true;
          result.begin_ = value;
          return this;
        }
        public Builder ClearBegin() {
          PrepareBuilder();
          result.hasBegin = false;
          result.begin_ = 0;
          return this;
        }
        
        public bool HasNum {
          get { return result.hasNum; }
        }
        public int Num {
          get { return result.Num; }
          set { SetNum(value); }
        }
        public Builder SetNum(int value) {
          PrepareBuilder();
          result.hasNum = true;
          result.num_ = value;
          return this;
        }
        public Builder ClearNum() {
          PrepareBuilder();
          result.hasNum = false;
          result.num_ = 0;
          return this;
        }
        
        public bool HasMarket {
          get { return result.hasMarket; }
        }
        public int Market {
          get { return result.Market; }
          set { SetMarket(value); }
        }
        public Builder SetMarket(int value) {
          PrepareBuilder();
          result.hasMarket = true;
          result.market_ = value;
          return this;
        }
        public Builder ClearMarket() {
          PrepareBuilder();
          result.hasMarket = false;
          result.market_ = 0;
          return this;
        }
        
        public bool HasPlate {
         get { return result.hasPlate; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Plate {
          get { return result.Plate; }
          set { SetPlate(value); }
        }
        public Builder SetPlate(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPlate = true;
          result.plate_ = value;
          return this;
        }
        public Builder SetPlate(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasPlate = true;
          result.plate_ = builderForValue.Build();
          return this;
        }
        public Builder MergePlate(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasPlate &&
              result.plate_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.plate_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.plate_).MergeFrom(value).BuildPartial();
          } else {
            result.plate_ = value;
          }
          result.hasPlate = true;
          return this;
        }
        public Builder ClearPlate() {
          PrepareBuilder();
          result.hasPlate = false;
          result.plate_ = null;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> BaseFilterListList {
          get { return PrepareBuilder().baseFilterList_; }
        }
        public int BaseFilterListCount {
          get { return result.BaseFilterListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter GetBaseFilterList(int index) {
          return result.GetBaseFilterList(index);
        }
        public Builder SetBaseFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseFilterList_[index] = value;
          return this;
        }
        public Builder SetBaseFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseFilterList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddBaseFilterList(global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseFilterList_.Add(value);
          return this;
        }
        public Builder AddBaseFilterList(global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseFilterList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeBaseFilterList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> values) {
          PrepareBuilder();
          result.baseFilterList_.Add(values);
          return this;
        }
        public Builder ClearBaseFilterList() {
          PrepareBuilder();
          result.baseFilterList_.Clear();
          return this;
        }
      }
      static C2S() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
      private S2C() { }
      private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
      private static readonly string[] _s2CFieldNames = new string[] { "allCount", "dataList", "lastPage" };
      private static readonly uint[] _s2CFieldTags = new uint[] { 16, 26, 8 };
      public static S2C DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override S2C DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override S2C ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_S2C__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_S2C__FieldAccessorTable; }
      }
      
      public const int LastPageFieldNumber = 1;
      private bool hasLastPage;
      private bool lastPage_;
      public bool HasLastPage {
        get { return hasLastPage; }
      }
      public bool LastPage {
        get { return lastPage_; }
      }
      
      public const int AllCountFieldNumber = 2;
      private bool hasAllCount;
      private int allCount_;
      public bool HasAllCount {
        get { return hasAllCount; }
      }
      public int AllCount {
        get { return allCount_; }
      }
      
      public const int DataListFieldNumber = 3;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.StockData> dataList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.StockData>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.StockData> DataListList {
        get { return dataList_; }
      }
      public int DataListCount {
        get { return dataList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.StockData GetDataList(int index) {
        return dataList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasLastPage) return false;
          if (!hasAllCount) return false;
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.StockData element in DataListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _s2CFieldNames;
        if (hasLastPage) {
          output.WriteBool(1, field_names[2], LastPage);
        }
        if (hasAllCount) {
          output.WriteInt32(2, field_names[0], AllCount);
        }
        if (dataList_.Count > 0) {
          output.WriteMessageArray(3, field_names[1], dataList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastPage) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, LastPage);
        }
        if (hasAllCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AllCount);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.StockData element in DataListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static S2C ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private S2C MakeReadOnly() {
        dataList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(S2C prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(S2C cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private S2C result;
        
        private S2C PrepareBuilder() {
          if (resultIsReadOnly) {
            S2C original = result;
            result = new S2C();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override S2C MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.S2C.Descriptor; }
        }
        
        public override S2C DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance; }
        }
        
        public override S2C BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is S2C) {
            return MergeFrom((S2C) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(S2C other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasLastPage) {
            LastPage = other.LastPage;
          }
          if (other.HasAllCount) {
            AllCount = other.AllCount;
          }
          if (other.dataList_.Count != 0) {
            result.dataList_.Add(other.dataList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _s2CFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasLastPage = input.ReadBool(ref result.lastPage_);
                break;
              }
              case 16: {
                result.hasAllCount = input.ReadInt32(ref result.allCount_);
                break;
              }
              case 26: {
                input.ReadMessageArray(tag, field_name, result.dataList_, global::Futu.OpenApi.Pb.QotStockFilter.StockData.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasLastPage {
          get { return result.hasLastPage; }
        }
        public bool LastPage {
          get { return result.LastPage; }
          set { SetLastPage(value); }
        }
        public Builder SetLastPage(bool value) {
          PrepareBuilder();
          result.hasLastPage = true;
          result.lastPage_ = value;
          return this;
        }
        public Builder ClearLastPage() {
          PrepareBuilder();
          result.hasLastPage = false;
          result.lastPage_ = false;
          return this;
        }
        
        public bool HasAllCount {
          get { return result.hasAllCount; }
        }
        public int AllCount {
          get { return result.AllCount; }
          set { SetAllCount(value); }
        }
        public Builder SetAllCount(int value) {
          PrepareBuilder();
          result.hasAllCount = true;
          result.allCount_ = value;
          return this;
        }
        public Builder ClearAllCount() {
          PrepareBuilder();
          result.hasAllCount = false;
          result.allCount_ = 0;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.StockData> DataListList {
          get { return PrepareBuilder().dataList_; }
        }
        public int DataListCount {
          get { return result.DataListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.StockData GetDataList(int index) {
          return result.GetDataList(index);
        }
        public Builder SetDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.StockData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.dataList_[index] = value;
          return this;
        }
        public Builder SetDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.dataList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddDataList(global::Futu.OpenApi.Pb.QotStockFilter.StockData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.dataList_.Add(value);
          return this;
        }
        public Builder AddDataList(global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.dataList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeDataList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.StockData> values) {
          PrepareBuilder();
          result.dataList_.Add(values);
          return this;
        }
        public Builder ClearDataList() {
          PrepareBuilder();
          result.dataList_.Clear();
          return this;
        }
      }
      static S2C() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
      private Request() { }
      private static readonly Request defaultInstance = new Request().MakeReadOnly();
      private static readonly string[] _requestFieldNames = new string[] { "c2s" };
      private static readonly uint[] _requestFieldTags = new uint[] { 10 };
      public static Request DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Request DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Request ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Request__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Request__FieldAccessorTable; }
      }
      
      public const int C2SFieldNumber = 1;
      private bool hasC2S;
      private global::Futu.OpenApi.Pb.QotStockFilter.C2S c2S_;
      public bool HasC2S {
        get { return hasC2S; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.C2S C2S {
        get { return c2S_ ?? global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasC2S) return false;
          if (!C2S.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _requestFieldNames;
        if (hasC2S) {
          output.WriteMessage(1, field_names[0], C2S);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasC2S) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Request ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Request MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Request prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Request cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Request result;
        
        private Request PrepareBuilder() {
          if (resultIsReadOnly) {
            Request original = result;
            result = new Request();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Request MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Request.Descriptor; }
        }
        
        public override Request DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Request.DefaultInstance; }
        }
        
        public override Request BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Request) {
            return MergeFrom((Request) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Request other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.Request.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasC2S) {
            MergeC2S(other.C2S);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _requestFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder subBuilder = global::Futu.OpenApi.Pb.QotStockFilter.C2S.CreateBuilder();
                if (result.hasC2S) {
                  subBuilder.MergeFrom(C2S);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                C2S = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasC2S {
         get { return result.hasC2S; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.C2S C2S {
          get { return result.C2S; }
          set { SetC2S(value); }
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotStockFilter.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = value;
          return this;
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = builderForValue.Build();
          return this;
        }
        public Builder MergeC2S(global::Futu.OpenApi.Pb.QotStockFilter.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasC2S &&
              result.c2S_ != global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance) {
              result.c2S_ = global::Futu.OpenApi.Pb.QotStockFilter.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
          } else {
            result.c2S_ = value;
          }
          result.hasC2S = true;
          return this;
        }
        public Builder ClearC2S() {
          PrepareBuilder();
          result.hasC2S = false;
          result.c2S_ = null;
          return this;
        }
      }
      static Request() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
      private Response() { }
      private static readonly Response defaultInstance = new Response().MakeReadOnly();
      private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
      private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
      public static Response DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Response DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Response ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Response__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Response__FieldAccessorTable; }
      }
      
      public const int RetTypeFieldNumber = 1;
      private bool hasRetType;
      private int retType_ = -400;
      public bool HasRetType {
        get { return hasRetType; }
      }
      public int RetType {
        get { return retType_; }
      }
      
      public const int RetMsgFieldNumber = 2;
      private bool hasRetMsg;
      private string retMsg_ = "";
      public bool HasRetMsg {
        get { return hasRetMsg; }
      }
      public string RetMsg {
        get { return retMsg_; }
      }
      
      public const int ErrCodeFieldNumber = 3;
      private bool hasErrCode;
      private int errCode_;
      public bool HasErrCode {
        get { return hasErrCode; }
      }
      public int ErrCode {
        get { return errCode_; }
      }
      
      public const int S2CFieldNumber = 4;
      private bool hasS2C;
      private global::Futu.OpenApi.Pb.QotStockFilter.S2C s2C_;
      public bool HasS2C {
        get { return hasS2C; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.S2C S2C {
        get { return s2C_ ?? global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRetType) return false;
          if (HasS2C) {
            if (!S2C.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _responseFieldNames;
        if (hasRetType) {
          output.WriteInt32(1, field_names[2], RetType);
        }
        if (hasRetMsg) {
          output.WriteString(2, field_names[1], RetMsg);
        }
        if (hasErrCode) {
          output.WriteInt32(3, field_names[0], ErrCode);
        }
        if (hasS2C) {
          output.WriteMessage(4, field_names[3], S2C);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
        }
        if (hasRetMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
        }
        if (hasErrCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
        }
        if (hasS2C) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Response ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Response MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Response prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Response cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Response result;
        
        private Response PrepareBuilder() {
          if (resultIsReadOnly) {
            Response original = result;
            result = new Response();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Response MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Response.Descriptor; }
        }
        
        public override Response DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Response.DefaultInstance; }
        }
        
        public override Response BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Response) {
            return MergeFrom((Response) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Response other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.Response.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRetType) {
            RetType = other.RetType;
          }
          if (other.HasRetMsg) {
            RetMsg = other.RetMsg;
          }
          if (other.HasErrCode) {
            ErrCode = other.ErrCode;
          }
          if (other.HasS2C) {
            MergeS2C(other.S2C);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _responseFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRetType = input.ReadInt32(ref result.retType_);
                break;
              }
              case 18: {
                result.hasRetMsg = input.ReadString(ref result.retMsg_);
                break;
              }
              case 24: {
                result.hasErrCode = input.ReadInt32(ref result.errCode_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder subBuilder = global::Futu.OpenApi.Pb.QotStockFilter.S2C.CreateBuilder();
                if (result.hasS2C) {
                  subBuilder.MergeFrom(S2C);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                S2C = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRetType {
          get { return result.hasRetType; }
        }
        public int RetType {
          get { return result.RetType; }
          set { SetRetType(value); }
        }
        public Builder SetRetType(int value) {
          PrepareBuilder();
          result.hasRetType = true;
          result.retType_ = value;
          return this;
        }
        public Builder ClearRetType() {
          PrepareBuilder();
          result.hasRetType = false;
          result.retType_ = -400;
          return this;
        }
        
        public bool HasRetMsg {
          get { return result.hasRetMsg; }
        }
        public string RetMsg {
          get { return result.RetMsg; }
          set { SetRetMsg(value); }
        }
        public Builder SetRetMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRetMsg = true;
          result.retMsg_ = value;
          return this;
        }
        public Builder ClearRetMsg() {
          PrepareBuilder();
          result.hasRetMsg = false;
          result.retMsg_ = "";
          return this;
        }
        
        public bool HasErrCode {
          get { return result.hasErrCode; }
        }
        public int ErrCode {
          get { return result.ErrCode; }
          set { SetErrCode(value); }
        }
        public Builder SetErrCode(int value) {
          PrepareBuilder();
          result.hasErrCode = true;
          result.errCode_ = value;
          return this;
        }
        public Builder ClearErrCode() {
          PrepareBuilder();
          result.hasErrCode = false;
          result.errCode_ = 0;
          return this;
        }
        
        public bool HasS2C {
         get { return result.hasS2C; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.S2C S2C {
          get { return result.S2C; }
          set { SetS2C(value); }
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotStockFilter.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = value;
          return this;
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = builderForValue.Build();
          return this;
        }
        public Builder MergeS2C(global::Futu.OpenApi.Pb.QotStockFilter.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasS2C &&
              result.s2C_ != global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance) {
              result.s2C_ = global::Futu.OpenApi.Pb.QotStockFilter.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
          } else {
            result.s2C_ = value;
          }
          result.hasS2C = true;
          return this;
        }
        public Builder ClearS2C() {
          PrepareBuilder();
          result.hasS2C = false;
          result.s2C_ = null;
          return this;
        }
      }
      static Response() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
